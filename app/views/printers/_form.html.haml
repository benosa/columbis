- content_for(:error_messages) do
  = f.error_messages

.fake_row.fields.file_block.odd
  .new_file_form
    - if @printer.id != nil
      %p
        = f.label :template
        = link_to '', template_path(@printer.id), :class => 'download', :title => t('download')
    .file
      = f.file_field :template
      = link_to I18n.t(".choose_file"), '#', :class => 'select_file'
    #mode_name{:style => "clear:both;flot:none"}
      = f.label :mode
      - default_mode = @printer.mode == nil ? "contract" : @printer.mode.to_s
      = f.select :mode, options_for_select(Printer::MODES.map{ |m| [Printer.human_attribute_name(m), m] }, default_mode), :class => 'mode_select list_select', :not_highlighted => true
    - style = @printer.mode == "memo" ? "" : "display:none"
    #country{:style => style}
      = f.label :country
      = f.fields_for :country, @printer.country do |cf|
        = cf.text_field :name, :class => 'autocomplete country', :style => "width:250px;", :data => { :id => @printer.country_id, :val => cf.object.try(:name) }.merge(ac_data(source: country_autocomplete_claims_path)), :not_highlighted => true